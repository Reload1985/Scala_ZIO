O que são os aliases do ZIO?
Os aliases (UIO, RIO, URIO, etc.) são apenas versões especializadas do ZIO que removem parâmetros desnecessários.

Lembra que um efeito ZIO[R, E, A] tem 3 partes:

R → Dependências necessárias (ex.: conexão com DB).
E → Tipo do erro que pode ocorrer.
A → Tipo do valor de retorno.
Quando algumas dessas partes não são necessárias, usamos aliases!

--------------------------------------------------------  !!!!!!! --------------------------------------------------------

Principais Aliases do ZIO

Alias       |	Equivalente a ZIO[R, E, A]  |	O que significa?

UIO[A]      |	ZIO[Any, Nothing, A]        |	Efeito sem falha garantida (nunca dá erro).
RIO[R, A]   |	ZIO[R, Throwable, A]        |	Efeito que pode falhar, mas requer R (ex.: DB).
URIO[R, A]  |	ZIO[R, Nothing, A]          |	Requer R (ex.: DB), mas nunca falha.
Task[A]     |	ZIO[Any, Throwable, A]      |	Efeito que pode falhar com Throwable, mas não precisa de R.


Aplicação prática no sistema de tarefas
Imagina que temos um serviço que:

Cria uma tarefa no DB.
Busca uma tarefa.
Marca uma tarefa como concluída.
Agora vamos usar os aliases corretamente!

1️⃣ Criar uma tarefa (sem falha garantida) → UIO[Task]

    import zio.*

    case class Task(id: Int, description: String, completed: Boolean)

    object TaskService {
    def createTask(description: String): UIO[Task] =
        ZIO.succeed(Task(1, description, completed = false)) // Nunca falha
    }
Por que UIO?

Não depende de nada (Any).
Não pode falhar (Nothing).
Retorna uma Task.

2️⃣ Buscar uma tarefa do DB (pode falhar) → RIO[Database, Task]

trait Database {
  def fetchTask(id: Int): Task
}

object TaskService {
  def getTask(id: Int): RIO[Database, Task] =
    ZIO.serviceWithZIO[Database](_.fetchTask(id))
}
Por que RIO[Database, Task]?

Requer uma Database para funcionar (R = Database).
Pode falhar (E = Throwable).
Retorna uma Task.

3️⃣ Marcar uma tarefa como concluída (não falha, mas precisa do DB) → URIO[Database, Unit]

object TaskService {
  def completeTask(id: Int): URIO[Database, Unit] =
    ZIO.serviceWithZIO[Database] { db =>
      ZIO.succeed(println(s"Tarefa $id concluída!"))
    }
}
Por que URIO[Database, Unit]?

Requer Database (R = Database).
Nunca falha (E = Nothing).
Retorna Unit (efeito sem retorno útil).


📌 Resumo prático
Método                    |	    Alias               |	Por quê?
createTask(desc: String)  |	UIO[Task]               |	Criar tarefa nunca falha.
getTask(id: Int)          |	RIO[Database, Task]     |	Buscar tarefa pode falhar e requer DB.
completeTask(id: Int)     |	URIO[Database, Unit]    |	Atualizar tarefa requer DB, mas nunca falha.


📌 Conclusão
Usa UIO[A] quando nunca há falha.
Usa RIO[R, A] quando há falha e precisa de dependências.
Usa URIO[R, A] quando precisa de dependências mas nunca falha.
Usa Task[A] quando pode falhar mas não precisa de dependências.


------------------------------------------------------------ !!!!!!!!!! ---------------------------------------------------------------------

📌 Estrutura de um ZIO[R, E, A]
A assinatura geral de um efeito ZIO é:

ZIO[R, E, A]
Onde:

R (Environment - Ambiente) → O que o efeito precisa para ser executado (exemplo: banco de dados, serviço externo, cache, etc.).
E (Error - Erro) → O tipo de erro que o efeito pode falhar.
A (Success - Sucesso) → O valor retornado caso o efeito tenha sucesso.
Exemplo genérico:

ZIO[Database, QueryError, User] // Requer um Database, pode falhar com QueryError, retorna User
📌 Analisando os exemplos que você viu
Agora vamos entender as variações que você encontrou e quando usá-las.



1️⃣ ZIO[Any, Option[QueryError], UserProfile]
🧐 O que isso significa?

Any → Não precisa de dependências externas (não requer nada específico).
Option[QueryError] → O erro pode ser Some(QueryError) (um erro de consulta) ou None (nenhum erro, apenas falha silenciosa).
UserProfile → Se der certo, retorna um perfil de usuário.
📌 Quando usar?

Quando um erro não é sempre garantido (às vezes só falha silenciosamente).
Exemplo: buscar um usuário no banco, mas se não encontrar, não queremos tratar como erro crítico.

def getUserProfile(userId: Int): ZIO[Any, Option[QueryError], UserProfile] = ???



2️⃣ ZIO[Any, QueryError, Option[UserProfile]]
🧐 O que isso significa?

Any → Sem dependências externas.
QueryError → Pode falhar com um erro real de banco.
Option[UserProfile] → Retorna um Some(UserProfile) se encontrar o usuário ou None se não existir.
📌 Quando usar?

Se queremos diferenciar entre "erro real" (exemplo: problema no banco) e "dado não encontrado" (None).
Exemplo: Buscar um usuário no banco de dados onde erro de conexão é diferente de usuário inexistente.

def getUserProfile(userId: Int): ZIO[Any, QueryError, Option[UserProfile]] = ???



3️⃣ ZIO[R, IOException, A]
🧐 O que isso significa?

R → Precisa de um ambiente R (exemplo: FileSystem).
IOException → Pode falhar com erro de entrada/saída (exemplo: falha ao ler um arquivo).
A → Se bem-sucedido, retorna A.
📌 Quando usar?

Para operações de I/O, como ler arquivos, baixar dados de uma API, acessar sistema de arquivos.

def readFile(file: String): ZIO[FileSystem, IOException, String] = ???



4️⃣ ZIO[Any, IndexError, String]
🧐 O que isso significa?

Any → Não requer dependências externas.
IndexError → Pode falhar com erro de índice (acesso inválido a lista, array, etc.).
String → Se bem-sucedido, retorna uma String.
📌 Quando usar?

Se estamos acessando listas ou estruturas que podem gerar erro de índice.

def getItem(index: Int, list: List[String]): ZIO[Any, IndexError, String] = ???



5️⃣ ZIO[Any, IOException, String]
🧐 O que isso significa?

Any → Não precisa de ambiente específico.
IOException → Pode falhar com erro de entrada/saída (arquivo não encontrado, erro de rede).
String → Retorna uma string com o conteúdo esperado.
📌 Quando usar?

Se estamos lidando com entrada/saída de arquivos ou rede.

def readFileContents(filePath: String): ZIO[Any, IOException, String] = ???
📌 Resumo prático: Quando usar cada variação?
Assinatura	Quando usar?
ZIO[Any, Option[E], A]	Quando um erro não é garantido (exemplo: buscar algo que pode ou não existir)
ZIO[Any, E, Option[A]]	Quando queremos diferenciar entre erro real e "não encontrado" (None)
ZIO[R, IOException, A]	Quando lidamos com arquivos, rede, banco de dados
ZIO[Any, IndexError, String]	Quando acessamos listas, arrays, estruturas indexadas
ZIO[Any, IOException, String]	Quando queremos ler arquivos ou comunicar com sistemas externos
📌 Existe uma ordem fixa para [R, E, A]?
SIM! Sempre segue a mesma estrutura:

R (Ambiente necessário para rodar)
E (Erro possível)
A (Valor retornado se der certo)
Se R = Any, significa que o efeito não precisa de nenhuma dependência externa e pode ser executado a qualquer momento.