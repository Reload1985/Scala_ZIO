üìå Diferen√ßa entre class, case class e object
Tipo            |	Pode ser instanciado com new?   |	Pode ter estado mut√°vel?    |	Tem apply autom√°tico?   |	Tem equals e hashCode autom√°ticos?
class           |	        ‚úÖ Sim	                            ‚úÖ Sim                       ‚ùå N√£o	                        ‚ùå N√£o
case class      |	        ‚úÖ Sim	                            ‚ùå N√£o (imut√°vel)	        ‚úÖ Sim	                        ‚úÖ Sim
object          |	        ‚ùå N√£o (Singleton)	                ‚úÖ Sim	                    ‚ùå N√£o	                        ‚úÖ Sim


üìå O que est√° acontecendo no c√≥digo?
Esse c√≥digo simula um sistema de inscri√ß√£o de usu√°rios usando ZIO e inje√ß√£o de depend√™ncias.

Um usu√°rio (User) √© representado por uma case class
A classe UserSubscrition inscreve um usu√°rio, enviando um email e salvando no banco.
Cada funcionalidade tem sua pr√≥pria classe:
EmailService: Envia um email de boas-vindas.
UserDataBase: Insere um usu√°rio no banco de dados.
ConnectionPool: Gera conex√µes com o banco.
Connection: Simula uma conex√£o real.
O subscritionService cria todas as inst√¢ncias e injeta as depend√™ncias.
O run (ainda n√£o implementado) seria a entrada principal do programa.


üìå Explica√ß√£o pr√°tica de class, case class e object no c√≥digo
1Ô∏è‚É£ case class User(name: String, email: String)
case class √© usada porque representa um modelo de dados (imut√°vel, com equals e hashCode autom√°ticos).
Exemplo de uso:

val user = User("Alice", "alice@email.com")
‚úÖ N√£o precisa de new.
‚úÖ Possui equals e hashCode, √∫til para compara√ß√£o e uso em cole√ß√µes (Set, Map).


2Ô∏è‚É£ class UserSubscrition(emailService: EmailService, userDataBase: UserDataBase)
Aqui, class √© usada porque precisamos instanciar objetos diferentes com depend√™ncias diferentes.
Tem um m√©todo subscribeUser que executa os efeitos do ZIO.
Exemplo de uso:

val subscription = new UserSubscrition(new EmailService, new UserDataBase(new ConnectionPool(10)))
‚ùå Precisa de new porque n√£o √© um singleton.
‚úÖ Pode ter estado interno, se necess√°rio.


3Ô∏è‚É£ object UserSubscrition
Usado para criar uma f√°brica (factory) da classe UserSubscrition, simplificando a inicializa√ß√£o:

val subscription = UserSubscrition.create(new EmailService, new UserDataBase(new ConnectionPool(10)))
‚úÖ Facilita a cria√ß√£o da inst√¢ncia.
‚úÖ N√£o precisa de new na cria√ß√£o.


4Ô∏è‚É£ class EmailService e class UserDataBase
S√£o servi√ßos, ent√£o faz sentido que sejam classes normais para permitir v√°rias inst√¢ncias.
Exemplo de uso:

val emailService = new EmailService()
emailService.email(User("Alice", "alice@email.com"))


5Ô∏è‚É£ object EmailService e object UserDataBase
S√£o companions objects, usados para criar inst√¢ncias mais facilmente:

val emailService = EmailService.create()
‚úÖ Encapsula a l√≥gica de cria√ß√£o.
‚úÖ Evita precisar chamar new diretamente.


6Ô∏è‚É£ class ConnectionPool(nConnection: Int) e object ConnectionPool
class ConnectionPool mant√©m um estado (nConnection), ent√£o faz sentido ser uma class.
object ConnectionPool √© uma factory, facilitando a cria√ß√£o de inst√¢ncias.

val pool = ConnectionPool.create(10)
‚úÖ Melhor que new ConnectionPool(10), pois pode conter l√≥gica extra.


7Ô∏è‚É£ object ZIODependencies extends ZIOAppDefault
Esse object √© um singleton e representa a aplica√ß√£o inteira.
extends ZIOAppDefault significa que ele pode rodar como uma aplica√ß√£o ZIO:

def run = ???
Aqui entraria a l√≥gica principal do programa.

üìå Resumo r√°pido
Tipo        |	Quando usar?
class       |	Quando precisas de uma inst√¢ncia com estado ou inje√ß√£o de depend√™ncia.
case class  |	Para modelos de dados imut√°veis que precisam de equals e hashCode.
object      |	Para singletons, factories e companions objects que criam inst√¢ncias de classes.
