Refs em ZIO (Concurrent Coordination)
No ZIO, Refs são variáveis mutáveis seguras para concorrência.

São usadas para guardar e atualizar estados de forma segura em programas concorrentes.
Permitem que múltiplas fibers (tarefas assíncronas) leiam e atualizem um valor sem condições de corrida (race conditions).
Porquê usar Refs?
Quando precisas de guardar estados mutáveis em programas assíncronos e concorrentes.
Para coordenar o acesso a recursos partilhados (ex.: contadores, flags, caches).
Garantem segurança na concorrência, evitando problemas típicos de variáveis globais em ambientes multi-thread.
Exemplo com Trello:
Imagina que no Trello precisas:

Contar o número de tarefas concluídas por múltiplos utilizadores em simultâneo.
Guardar o estado de sincronização (ex.: um flag que indica se a sincronização está ativa).
Com Refs, podes fazer isto sem te preocupares com problemas de concorrência.

Funções/Métodos mais usados:
Ref.make[A](valorInicial: A): UIO[Ref[A]] → Cria um Ref com um valor inicial.
.get → Lê o valor atual.
.set(novoValor) → Define um novo valor (substitui o anterior).
.update(f) → Atualiza o valor usando uma função.
.modify(f) → Atualiza e devolve um resultado calculado a partir do valor atual.
1. Exemplo: Contar Tarefas Concluídas (Concorrência Segura)
Imagina que queres contar quantas tarefas foram concluídas por múltiplos utilizadores em simultâneo.

scala
Copy
Edit
object TrelloTaskCounter extends ZIOAppDefault {
  def run = for {
    counter <- Ref.make(0)  // Criar um Ref com valor inicial 0

    // Fiber 1 - Utilizador A conclui 2 tarefas
    fiber1 <- (counter.update(_ + 2)).fork

    // Fiber 2 - Utilizador B conclui 3 tarefas
    fiber2 <- (counter.update(_ + 3)).fork

    // Esperar que as fibers terminem
    _ <- fiber1.join
    _ <- fiber2.join

    // Obter o valor final do contador
    finalCount <- counter.get
    _ <- ZIO.succeed(println(s"Tarefas concluídas: $finalCount"))
  } yield ()
}
Explicação:

Ref.make(0): Cria um contador inicializado a 0.
.update(_ + 2): Incrementa o contador de forma segura e concorrente.
.fork: Corre as operações em paralelo (concorrência).
.get: Lê o valor final do contador.
Resultado esperado: Tarefas concluídas: 5 (2 + 3).
Porquê usar Ref aqui?

Se usasses uma variável normal, poderias ter uma condição de corrida (race condition).
Com Ref, as atualizações são atómicas e seguras para concorrência.
2. Exemplo: Estado de Sincronização (Flag Ativo/Desativo)
Imagina que no Trello queres controlar o estado de sincronização (ex.: Ativo/Desativo).
Várias fibers podem querer ler ou alterar este estado ao mesmo tempo.

scala
Copy
Edit
object TrelloSyncState extends ZIOAppDefault {
  def run = for {
    syncState <- Ref.make(false) // Inicialmente, sincronização está desativada

    // Ativar sincronização em paralelo
    fiber1 <- (syncState.set(true) *> ZIO.succeed(println("Sincronização Ativada!"))).fork

    // Verificar estado em paralelo
    fiber2 <- (ZIO.sleep(1.second) *> syncState.get.flatMap(state =>
      ZIO.succeed(println(s"Estado de Sincronização: $state"))
    )).fork

    _ <- fiber1.join
    _ <- fiber2.join
  } yield ()
}
Explicação:

Ref.make(false): Inicializa o estado como desativado (false).
.set(true): Ativa a sincronização (true).
.get: Lê o estado atual de sincronização.
Concorrência Segura: Mesmo com múltiplas fibers, o estado é consistente e correto.
3. Exemplo: Atualização Complexa com .modify
Imagina que precisas atualizar e devolver um resultado ao mesmo tempo.
Ex.: Concluir uma tarefa e devolver o total de tarefas restantes.

scala
Copy
Edit
object TrelloTaskUpdate extends ZIOAppDefault {
  def run = for {
    tasks <- Ref.make(List("Tarefa 1", "Tarefa 2", "Tarefa 3"))

    // Remover a primeira tarefa e devolver a lista atualizada
    updatedTasks <- tasks.modify {
      case head :: tail => (tail, tail) // Remove a primeira tarefa
      case Nil => (Nil, Nil)
    }

    _ <- ZIO.succeed(println(s"Tarefas restantes: $updatedTasks"))
  } yield ()
}
Explicação:

.modify: Atualiza o valor e devolve um resultado calculado.
(tail, tail): Atualiza a lista removendo o primeiro item e devolve a lista restante.
Útil para operações complexas que precisam de atualizar e devolver ao mesmo tempo.
Quando usar Refs?
Quando precisas de guardar estados mutáveis em programas concorrentes.
Para coordenar o acesso a recursos partilhados (ex.: contadores, listas, flags).
Sempre que várias fibers precisarem de ler e atualizar o mesmo valor.
Vantagens de Refs:
Segurança na concorrência: As operações são atómicas, evitando condições de corrida.
Performance: São altamente eficientes para acesso e atualização de estados em programas concorrentes.
Facilidade de uso: Têm uma API simples e expressiva para leitura e atualização.
Resumo:
Refs em ZIO são variáveis mutáveis seguras para concorrência.
Usadas para guardar e atualizar estados em programas assíncronos e concorrentes.
Garantem segurança na concorrência sem locks complicados.
No contexto do Trello, ajudam a contar tarefas, coordenar sincronizações e gerir estados partilhados.
Estes exemplos mostram como manter estados consistentes enquanto várias operações ocorrem em paralelo.


---------------------------------------------- !!!!! --------------------------------------------------

EXEMPLO: 

O que este código faz:
Este código simula o download de um ficheiro dividido em várias partes (fileParts). As partes vão sendo "baixadas" aos poucos, com um delay de 1 segundo entre cada parte, e o programa verifica constantemente se o ficheiro está completo, ou seja, se termina em "<EOF>".

1. Analisando as Partes do Código:
A. Lista de Partes do Ficheiro:
scala
Copy
Edit
val fileParts = List("I ", "love S", "cala", "with pure FP an", "d ZIO! <EOF>")
Cada string representa uma parte do ficheiro a ser "baixada".
A última parte termina com "<EOF>", que indica que o download está completo.
B. downloadFileWithRef() - Função Principal:
scala
Copy
Edit
def downloadFileWithRef(): UIO[Unit] = { ... }
Esta é a função principal que vai coordenar o download das partes e verificar se o ficheiro está completo.
2. Função downloadFile(contentRef: Ref[String]):
scala
Copy
Edit
def downloadFile(contentRef: Ref[String]): UIO[Unit] =
  ZIO.collectAllDiscard(
    fileParts.map { part =>
      ZIO.succeed(s"got '$part'").debugThread *>
      ZIO.sleep(1.second) *>
      contentRef.update(_ + part)
    }
  )
O que faz:
Baixa as partes do ficheiro uma por uma e acumula o conteúdo no contentRef.
Passo a Passo:
fileParts.map { ... }

Para cada parte da lista, cria um efeito ZIO que:
Mostra na consola que recebeu aquela parte: s"got '$part'".
Espera 1 segundo para simular o tempo de download: ZIO.sleep(1.second).
Adiciona a parte ao contentRef, que guarda o conteúdo do ficheiro.
contentRef.update(_ + part)

Atualiza o estado do Ref, adicionando (+) a nova parte ao conteúdo existente.
Por exemplo, se antes tinha "I ", agora vai ter "I love S".
ZIO.collectAllDiscard

Corre todos os efeitos em sequência, descartando o resultado (pois só queremos baixar o ficheiro, o resultado não importa).
3. Função notifyFileComplete(contentRef: Ref[String]):
scala
Copy
Edit
def notifyFileComplete(contentRef: Ref[String]): UIO[Unit] = for {
  file <- contentRef.get
  _ <- if(file.endsWith("<EOF>")) 
          ZIO.succeed("File download complete").debugThread
       else 
          ZIO.succeed("downloading...").debugThread *>
          ZIO.sleep(500.millis) *>
          notifyFileComplete(contentRef)
} yield()
O que faz:
Verifica constantemente se o download foi concluído.
Se estiver completo, mostra File download complete.
Se não estiver, mostra downloading..., espera 0,5 segundos e verifica novamente.
Passo a Passo:
contentRef.get

Vai buscar o conteúdo atual do ficheiro.
file.endsWith("<EOF>")

Verifica se o conteúdo termina com "<EOF>".
Se sim:
Mostra File download complete.
Se não:
Mostra downloading....
Espera 0,5 segundos e chama-se a si mesma (recursão) para verificar novamente.
4. Combinação e Execução Paralela:
scala
Copy
Edit
for {
  contentRef <- Ref.make("")
  _ <- (downloadFile(contentRef) zipPar notifyFileComplete(contentRef))
} yield ()
Explicação:
Ref.make(""): Cria o Ref que vai armazenar o conteúdo do ficheiro. Começa como string vazia.
downloadFile(contentRef): Inicia o download das partes.
notifyFileComplete(contentRef): Inicia a verificação constante do estado do ficheiro.
zipPar: Corre as duas funções em paralelo:
downloadFile(contentRef): Vai baixando as partes.
notifyFileComplete(contentRef): Vai verificando constantemente o progresso do download.
5. Porque funciona e o que acontece na consola:
As duas funções correm em paralelo:
downloadFile vai adicionando partes ao contentRef.
notifyFileComplete vai verificando o conteúdo em tempo real.
A consola mostra algo como:
javascript
Copy
Edit
[zio-default-async-1] got 'I '
[zio-default-async-1] downloading...
[zio-default-async-1] got 'love S'
[zio-default-async-1] downloading...
[zio-default-async-1] got 'cala'
[zio-default-async-1] downloading...
[zio-default-async-1] got 'with pure FP an'
[zio-default-async-1] downloading...
[zio-default-async-1] got 'd ZIO! <EOF>'
[zio-default-async-1] File download complete
Resumo e Pontos-Chave:
Usa Ref para armazenar o estado do conteúdo do ficheiro.
downloadFile() vai baixando as partes, atualizando o Ref.
notifyFileComplete() vai verificando constantemente se o ficheiro está completo.
zipPar permite corrida paralela das duas operações.
A abordagem de Ref e zipPar permite um comportamento reativo ao estado do download.
Vantagens de Usar Ref e zipPar:
Ref é thread-safe e permite estado partilhado em programação funcional.
zipPar permite concorrência fácil em ZIO, mantendo o código limpo e legível.
