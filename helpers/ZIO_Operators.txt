üìå *> ‚Äì Ignora o primeiro efeito, mant√©m o segundo
O *> executa dois efeitos em sequ√™ncia, mas descarta o resultado do primeiro e mant√©m apenas o segundo.

üîπ Analogia simples
Imagina que queres ligar o carro e depois come√ßar a conduzir.

O ato de ligar o carro n√£o tem um valor final √∫til.
O que interessa √© a a√ß√£o seguinte: conduzir.
üîπ Exemplo pr√°tico

val effect = ZIO.succeed(println("Conectando ao banco de dados")) *> ZIO.succeed("Conex√£o estabelecida")
‚úÖ O primeiro ZIO.succeed(println(...)) √© executado, mas o seu valor de retorno (Unit) √© ignorado.
‚úÖ O que sobra √© o segundo efeito, que retorna "Conex√£o estabelecida".

Se quis√©ssemos manter o resultado do primeiro efeito, usar√≠amos zipWith ou flatMap em vez de *>.

üìå Outros operadores √∫teis no ZIO
Agora que j√° entendes *>, existem outros operadores parecidos que s√£o muito √∫teis:



1Ô∏è‚É£ <* ‚Äì Mant√©m o primeiro efeito, ignora o segundo
Este √© o oposto de *>. Executa dois efeitos, mas mant√©m apenas o resultado do primeiro.

val effect = ZIO.succeed("Tarefa conclu√≠da") <* ZIO.succeed(println("Logging sucesso"))
‚úÖ O log √© impresso, mas o valor final do efeito √© "Tarefa conclu√≠da".



2Ô∏è‚É£ zip ‚Äì Mant√©m ambos os efeitos
Executa dois efeitos em paralelo e devolve os dois resultados.

val effect = ZIO.succeed(42).zip(ZIO.succeed("Sucesso!"))
// Retorna ZIO[Any, Nothing, (Int, String)] -> (42, "Sucesso!")
üìå Uso recomendado: Quando precisas dos dois valores no final.



3Ô∏è‚É£ zipWith ‚Äì Combina os valores dos efeitos
Funciona como zip, mas permite definir como os dois valores devem ser combinados.

val effect = ZIO.succeed(10).zipWith(ZIO.succeed(20))(_ + _)
// Retorna ZIO[Any, Nothing, Int] -> 30
üìå Uso recomendado: Quando queres executar dois efeitos e combinar os valores.



4Ô∏è‚É£ flatMap ‚Äì Usa o primeiro resultado para decidir o segundo
Se precisas que o segundo efeito dependa do valor do primeiro, flatMap √© a melhor escolha.

val effect = ZIO.succeed(42).flatMap(n => ZIO.succeed(n * 2))
// Retorna 84
üìå Uso recomendado: Quando precisas do valor do primeiro efeito para continuar.

üìå Quando usar cada um?
Operador	Executa ambos?	Qual valor mant√©m?	Quando usar?
*>	Sim	Segundo efeito	Quando o primeiro efeito n√£o tem um valor √∫til
<*	Sim	Primeiro efeito	Quando o segundo efeito √© s√≥ um efeito colateral (ex.: log)
zip	Sim	Ambos os efeitos como uma tupla	Quando precisas de ambos os valores
zipWith	Sim	Ambos os efeitos, mas combinados	Quando queres combinar os valores das execu√ß√µes
flatMap	Sim	Segundo efeito, mas depende do primeiro	Quando o segundo efeito depende do primeiro
üöÄ Faz sentido para ti agora?